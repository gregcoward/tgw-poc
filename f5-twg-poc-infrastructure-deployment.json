{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Template v4.0.0: AWS CloudFormation Template for creating a full stack with a 1NIC BIG-IP, a 1 Availability Zone VPC, subnets, security groups and a webserver (Bitnami LAMP stack with username bitnami **WARNING** This template creates Amazon EC2 Instances. You will be billed for the AWS resources used if you create a stack from this template.",
  "Metadata": {
    "Version": "4.0.0"
  },
  "Outputs": {
    "attachVpcCommandString": {
      "Description": "AWSCLI command string to attach newly created VPCs to the Transit Gateway",
      "Value": {
        "Fn::Join": [
          "",
          [
            "aws --region us-east-1 ec2 create-transit-gateway-vpc-attachment --transit-gateway-id ",
            { "Ref": "TransitGateway" },
            " --vpc-id ",
            { "Ref": "SecurityVpc" },
            " --subnet-ids ",
            { "Ref": "SecuritySubnet" },
            " && ",
            " aws --region us-east-1 ec2 create-transit-gateway-vpc-attachment --transit-gateway-id ",
            { "Ref": "TransitGateway" },
            " --vpc-id ",
            { "Ref": "ApplicationVpc" },
            " --subnet-ids ",
            { "Ref": "ApplicationSubnet" },
            " && ",
            " aws --region us-east-1 ec2 create-transit-gateway-vpc-attachment --transit-gateway-id ",
            { "Ref": "TransitGateway" },
            " --vpc-id ",
            { "Ref": "Application2Vpc" },
            " --subnet-ids ",
            { "Ref": "Application2Subnet" }
          ]
        ]
      }
    },
    "VpcRouteAddCommandString": {
      "Description": "AWSCLI command string to add intra-tgw routes to VPCs  NOTE:  Run after TGW to becomes 'available'",
      "Value": {
        "Fn::Join": [
          "",
          [
            " aws --region us-east-1 ec2 create-route --destination-cidr-block 192.168.0.0/16 --route-table-id ",
            { "Ref": "SecurityRouteTable" },
            " --transit-gateway-id ",
            { "Ref": "TransitGateway" },
            " && ",
            " aws --region us-east-1 ec2 create-route --destination-cidr-block 172.31.0.0/16 --route-table-id ",
            { "Ref": "SecurityRouteTable" },
            " --transit-gateway-id ",
            { "Ref": "TransitGateway" },
            " && ",
            " aws --region us-east-1 ec2 create-route --destination-cidr-block 10.0.0.0/16 --route-table-id ",
            { "Ref": "ApplicationRouteTable" },
            " --transit-gateway-id ",
            { "Ref": "TransitGateway" },
            " && ",
            " aws --region us-east-1 ec2 create-route --destination-cidr-block 10.0.0.0/16 --route-table-id ",
            { "Ref": "Application2RouteTable" },
            " --transit-gateway-id ",
            { "Ref": "TransitGateway" }
          ]
        ]
      }
    },
    "Bigip1MgmtUrl": {
      "Description": "BIG-IP Management GUI",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Fn::GetAtt": [
                "Bigip1Instance",
                "PublicIp"
              ]
            },
            ":8443"
          ]
        ]
      }
    },
    "Bigip1SSh": {
      "Description": "BIG-IP SSH Connection String",
      "Value": {
        "Fn::Join": [
          "",
          [
            "ssh -i \"",
            { "Ref": "sshKey" },
            "\" admin@",
            {
              "Fn::GetAtt": [
                "Bigip1Instance",
                "PublicIp"
              ]
            }
          ]
        ]
      }
    }
  },
  "Parameters": {
    "sshKey": {
      "Description": "EC2 KeyPair to enable SSH access to the BIG-IP instance",
      "Type": "AWS::EC2::KeyPair::KeyName"
    }
  },
  "Resources": {
    "tstgwAttachedVpcPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "tstgwAttachedVpcPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "0",
              "Effect": "Allow",
              "Action": [
                "ec2:CreateNetworkInterface",
                "ec2:DescribeNetworkInterfaces",
                "ec2:ModifyNetworkInterfaceAttribute",
                "ec2:DeleteNetworkInterface",
                "ec2:CreateNetworkInterfacePermission",
                "ec2:DeleteSecurityGroup"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles": [
          { "Ref": "tstgwAttachedVpcRole" }
        ]
      }
    },
    "tstgwAttachedVpcRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "tstgwAttachedVpcRole",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  "arn:aws:iam::617671455197:user/hub-provisioning-pdx-cell0",
                  "arn:aws:iam::617671455197:user/hub-api-pdx-cell0"
                ]
              },
              "Action": "sts:AssumeRole",
              "Condition": {
                "StringEquals": {
                  "sts:ExternalId": "bffdf392-a8fb-4c38-8c85-28588db11c6e"
                }
              }
            },
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  "arn:aws:iam::528355938383:user/hub-provisioning-iad-cell0",
                  "arn:aws:iam::528355938383:user/hub-api-iad-cell0"
                ]
              },
              "Action": "sts:AssumeRole",
              "Condition": {
                "StringEquals": {
                  "sts:ExternalId": "bffdf392-a8fb-4c38-8c85-28588db11c6e"
                }
              }
            },
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  "arn:aws:iam::415813071336:user/hub-provisioning-dub-cell0",
                  "arn:aws:iam::415813071336:user/hub-api-dub-cell0"
                ]
              },
              "Action": "sts:AssumeRole",
              "Condition": {
                "StringEquals": {
                  "sts:ExternalId": "bffdf392-a8fb-4c38-8c85-28588db11c6e"
                }
              }
            },
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  "arn:aws:iam::556797897706:user/hub-provisioning-cmh-cell0",
                  "arn:aws:iam::556797897706:user/hub-api-cmh-cell0"
                ]
              },
              "Action": "sts:AssumeRole",
              "Condition": {
                "StringEquals": {
                  "sts:ExternalId": "bffdf392-a8fb-4c38-8c85-28588db11c6e"
                }
              }
            },
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  "arn:aws:iam::242819775426:user/hub-provisioning-sfo-cell0",
                  "arn:aws:iam::242819775426:user/hub-api-sfo-cell0"
                ]
              },
              "Action": "sts:AssumeRole",
              "Condition": {
                "StringEquals": {
                  "sts:ExternalId": "bffdf392-a8fb-4c38-8c85-28588db11c6e"
                }
              }
            },
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  "arn:aws:iam::806762163133:user/hub-provisioning-bom-cell0",
                  "arn:aws:iam::806762163133:user/hub-api-bom-cell0"
                ]
              },
              "Action": "sts:AssumeRole",
              "Condition": {
                "StringEquals": {
                  "sts:ExternalId": "bffdf392-a8fb-4c38-8c85-28588db11c6e"
                }
              }
            },
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  "arn:aws:iam::406090173799:user/hub-provisioning-nrt-cell0",
                  "arn:aws:iam::406090173799:user/hub-api-nrt-cell0"
                ]
              },
              "Action": "sts:AssumeRole",
              "Condition": {
                "StringEquals": {
                  "sts:ExternalId": "bffdf392-a8fb-4c38-8c85-28588db11c6e"
                }
              }
            }
          ]
        }
      }
    },
    "SecurityVpc": {
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": "true",
        "EnableDnsSupport": "true",
        "Tags": [
          {
            "Key": "Application",
            "Value": "F5DemoApp"
          },
          {
            "Key": "Costcenter",
            "Value": "F5BD"
          },
          {
            "Key": "Environment",
            "Value": "F5BDENV"
          },
          {
            "Key": "Group",
            "Value": "F5BD"
          },
          {
            "Key": "Owner",
            "Value": "F5BusinesssDevelopment"
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "SecurityVpc: ",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          }
        ]
      },
      "Type": "AWS::EC2::VPC"
    },
    "SecuritySubnet": {
      "Properties": {
        "AvailabilityZone": "us-east-1a",
        "CidrBlock": "10.0.1.0/24",
        "Tags": [
          {
            "Key": "Application",
            "Value": "F5DemoApp"
          },
          {
            "Key": "Costcenter",
            "Value": "F5BD"
          },
          {
            "Key": "Environment",
            "Value": "F5BDENV"
          },
          {
            "Key": "Group",
            "Value": "F5BD"
          },
          {
            "Key": "Owner",
            "Value": "F5BusinesssDevelopment"
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "SecuritySubnet:",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          }
        ],
        "VpcId": {
          "Ref": "SecurityVpc"
        }
      },
      "Type": "AWS::EC2::Subnet"
    },
    "ApplicationVpc": {
      "Properties": {
        "CidrBlock": "172.31.0.0/16",
        "EnableDnsHostnames": "true",
        "EnableDnsSupport": "true",
        "Tags": [
          {
            "Key": "Application",
            "Value": "F5DemoApp"
          },
          {
            "Key": "Costcenter",
            "Value": "F5BD"
          },
          {
            "Key": "Environment",
            "Value": "F5BDENV"
          },
          {
            "Key": "Group",
            "Value": "F5BD"
          },
          {
            "Key": "Owner",
            "Value": "F5BusinesssDevelopment"
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "ApplicationVpc: ",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          }
        ]
      },
      "Type": "AWS::EC2::VPC"
    },
    "ApplicationSubnet": {
      "Properties": {
        "AvailabilityZone": "us-east-1a",
        "CidrBlock": "172.31.1.0/24",
        "Tags": [
          {
            "Key": "Application",
            "Value": "F5DemoApp"
          },
          {
            "Key": "Costcenter",
            "Value": "F5BD"
          },
          {
            "Key": "Environment",
            "Value": "F5BDENV"
          },
          {
            "Key": "Group",
            "Value": "F5BD"
          },
          {
            "Key": "Owner",
            "Value": "F5BusinesssDevelopment"
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "ApplicationSubnet:",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          }
        ],
        "VpcId": {
          "Ref": "ApplicationVpc"
        }
      },
      "Type": "AWS::EC2::Subnet"
    },
    "Application2Vpc": {
      "Properties": {
        "CidrBlock": "192.168.0.0/16",
        "EnableDnsHostnames": "true",
        "EnableDnsSupport": "true",
        "Tags": [
          {
            "Key": "Application",
            "Value": "F5DemoApp"
          },
          {
            "Key": "Costcenter",
            "Value": "F5BD"
          },
          {
            "Key": "Environment",
            "Value": "F5BDENV"
          },
          {
            "Key": "Group",
            "Value": "F5BD"
          },
          {
            "Key": "Owner",
            "Value": "F5BusinesssDevelopment"
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "Application2Vpc: ",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          }
        ]
      },
      "Type": "AWS::EC2::VPC"
    },
    "Application2Subnet": {
      "Properties": {
        "AvailabilityZone": "us-east-1a",
        "CidrBlock": "192.168.1.0/24",
        "Tags": [
          {
            "Key": "Application",
            "Value": "F5DemoApp"
          },
          {
            "Key": "Costcenter",
            "Value": "F5BD"
          },
          {
            "Key": "Environment",
            "Value": "F5BDENV"
          },
          {
            "Key": "Group",
            "Value": "F5BD"
          },
          {
            "Key": "Owner",
            "Value": "F5BusinesssDevelopment"
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "Application2Subnet:",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          }
        ],
        "VpcId": {
          "Ref": "Application2Vpc"
        }
      },
      "Type": "AWS::EC2::Subnet"
    },
    "InternetGateway": {
      "Properties": {
        "Tags": [
          {
            "Key": "Application",
            "Value": "F5DemoApp"
          },
          {
            "Key": "Costcenter",
            "Value": "F5BD"
          },
          {
            "Key": "Environment",
            "Value": "F5BDENV"
          },
          {
            "Key": "Group",
            "Value": "F5BD"
          },
          {
            "Key": "Owner",
            "Value": "F5BusinesssDevelopment"
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "InternetGateway: ",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          }
        ]
      },
      "Type": "AWS::EC2::InternetGateway"
    },
    "AttachGateway": {
      "Properties": {
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        },
        "VpcId": {
          "Ref": "SecurityVpc"
        }
      },
      "Type": "AWS::EC2::VPCGatewayAttachment"
    },
    "SecurityDefaultRoute": {
      "DependsOn": "AttachGateway",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        },
        "RouteTableId": {
          "Ref": "SecurityRouteTable"
        }
      },
      "Type": "AWS::EC2::Route"
    },
    "SecurityRouteTable": {
      "Properties": {
        "Tags": [
          {
            "Key": "Application",
            "Value": "F5DemoApp"
          },
          {
            "Key": "Costcenter",
            "Value": "F5BD"
          },
          {
            "Key": "Environment",
            "Value": "F5BDENV"
          },
          {
            "Key": "Group",
            "Value": "F5BD"
          },
          {
            "Key": "Owner",
            "Value": "F5BusinesssDevelopment"
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "Security Route Table:",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          },
          {
            "Key": "Network",
            "Value": "Application"
          }
        ],
        "VpcId": {
          "Ref": "SecurityVpc"
        }
      },
      "Type": "AWS::EC2::RouteTable"
    },
    "SecuritySubnetRouteTableAssociation": {
      "Properties": {
        "RouteTableId": {
          "Ref": "SecurityRouteTable"
        },
        "SubnetId": {
          "Ref": "SecuritySubnet"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "ApplicationRouteTable": {
      "Properties": {
        "Tags": [
          {
            "Key": "Application",
            "Value": "F5DemoApp"
          },
          {
            "Key": "Costcenter",
            "Value": "F5BD"
          },
          {
            "Key": "Environment",
            "Value": "F5BDENV"
          },
          {
            "Key": "Group",
            "Value": "F5BD"
          },
          {
            "Key": "Owner",
            "Value": "F5BusinesssDevelopment"
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "Application Route Table: ",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          },
          {
            "Key": "Network",
            "Value": "External"
          }
        ],
        "VpcId": {
          "Ref": "ApplicationVpc"
        }
      },
      "Type": "AWS::EC2::RouteTable"
    },
    "ApplicationSubnetRouteTableAssociation": {
      "Properties": {
        "RouteTableId": {
          "Ref": "ApplicationRouteTable"
        },
        "SubnetId": {
          "Ref": "ApplicationSubnet"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "Application2RouteTable": {
      "Properties": {
        "Tags": [
          {
            "Key": "Application",
            "Value": "F5DemoApp"
          },
          {
            "Key": "Costcenter",
            "Value": "F5BD"
          },
          {
            "Key": "Environment",
            "Value": "F5BDENV"
          },
          {
            "Key": "Group",
            "Value": "F5BD"
          },
          {
            "Key": "Owner",
            "Value": "F5BusinesssDevelopment"
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "Application2 Route Table: ",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          },
          {
            "Key": "Network",
            "Value": "External"
          }
        ],
        "VpcId": {
          "Ref": "Application2Vpc"
        }
      },
      "Type": "AWS::EC2::RouteTable"
    },
    "Application2SubnetRouteTableAssociation": {
      "Properties": {
        "RouteTableId": {
          "Ref": "Application2RouteTable"
        },
        "SubnetId": {
          "Ref": "Application2Subnet"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "TransitGateway": {
      "Type": "AWS::EC2::TransitGateway",
      "Properties": {
        "Description": "Security sTransitGateway",
        "AutoAcceptSharedAttachments": "disable",
        "DefaultRouteTableAssociation": "enable",
        "Tags": [
          {
            "Key": "Application",
            "Value": "F5DemoApp"
          },
          {
            "Key": "Costcenter",
            "Value": "F5BD"
          },
          {
            "Key": "Environment",
            "Value": "F5BDENV"
          },
          {
            "Key": "Group",
            "Value": "F5BD"
          },
          {
            "Key": "Owner",
            "Value": "F5BusinesssDevelopment"
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "Transit Gateway",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          }
        ]
      }
    },
    "Webserver": {
      "Properties": {
        "ImageId": "ami-0d1c4f8aa51e723b3",
        "InstanceType": "t2.micro",
        "KeyName": {
          "Ref": "sshKey"
        },
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": "false",
            "Description": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  " Webserver Network Interface"
                ]
              ]
            },
            "DeviceIndex": "0",
            "GroupSet": [
              {
                "Ref": "WebserverSecurityGroup"
              }
            ],
            "SubnetId": {
              "Ref": "ApplicationSubnet"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Application",
            "Value": "F5DemoApp"
          },
          {
            "Key": "Costcenter",
            "Value": "F5BD"
          },
          {
            "Key": "Environment",
            "Value": "F5BDENV"
          },
          {
            "Key": "Group",
            "Value": "F5BD"
          },
          {
            "Key": "Owner",
            "Value": "F5BusinesssDevelopment"
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "Webserver:",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          }
        ]
      },
      "Type": "AWS::EC2::Instance"
    },
    "WebserverSecurityGroup": {
      "Properties": {
        "GroupDescription": "Enable Access to Webserver",
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "22",
            "IpProtocol": "tcp",
            "ToPort": "22"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "80",
            "IpProtocol": "tcp",
            "ToPort": "80"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "443",
            "IpProtocol": "tcp",
            "ToPort": "443"
          }
        ],
        "Tags": [
          {
            "Key": "Application",
            "Value": "F5DemoApp"
          },
          {
            "Key": "Costcenter",
            "Value": "F5BD"
          },
          {
            "Key": "Environment",
            "Value": "F5BDENV"
          },
          {
            "Key": "Group",
            "Value": "F5BD"
          },
          {
            "Key": "Owner",
            "Value": "F5BusinesssDevelopment"
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "Webserver Security Group:",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          }
        ],
        "VpcId": {
          "Ref": "ApplicationVpc"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "Webserver2SecurityGroup": {
      "Properties": {
        "GroupDescription": "Enable Access to Webserver",
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "22",
            "IpProtocol": "tcp",
            "ToPort": "22"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "80",
            "IpProtocol": "tcp",
            "ToPort": "80"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "443",
            "IpProtocol": "tcp",
            "ToPort": "443"
          }
        ],
        "Tags": [
          {
            "Key": "Application",
            "Value": "F5DemoApp"
          },
          {
            "Key": "Costcenter",
            "Value": "F5BD"
          },
          {
            "Key": "Environment",
            "Value": "F5BDENV"
          },
          {
            "Key": "Group",
            "Value": "F5BD"
          },
          {
            "Key": "Owner",
            "Value": "F5BusinesssDevelopment"
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "Webserver2 Security Group:",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          }
        ],
        "VpcId": {
          "Ref": "Application2Vpc"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "Webserver2": {
      "Properties": {
        "ImageId": "ami-0d1c4f8aa51e723b3",
        "InstanceType": "t2.micro",
        "KeyName": {
          "Ref": "sshKey"
        },
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": "false",
            "Description": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  " Webserver Network Interface"
                ]
              ]
            },
            "DeviceIndex": "0",
            "GroupSet": [
              {
                "Ref": "Webserver2SecurityGroup"
              }
            ],
            "SubnetId": {
              "Ref": "Application2Subnet"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Application",
            "Value": "F5DemoApp"
          },
          {
            "Key": "Costcenter",
            "Value": "F5BD"
          },
          {
            "Key": "Environment",
            "Value": "F5BDENV"
          },
          {
            "Key": "Group",
            "Value": "F5BD"
          },
          {
            "Key": "Owner",
            "Value": "F5BusinesssDevelopment"
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "Webserver2:",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          }
        ]
      },
      "Type": "AWS::EC2::Instance"
    },
    "BigipExternalSecurityGroup": {
      "Properties": {
        "GroupDescription": "Public or External interface rules, including BIG-IP management",
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "22",
            "IpProtocol": "tcp",
            "ToPort": "22"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "8443",
            "IpProtocol": "tcp",
            "ToPort": "8443"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "80",
            "IpProtocol": "tcp",
            "ToPort": "80"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "443",
            "IpProtocol": "tcp",
            "ToPort": "443"
          }
        ],
        "Tags": [
          {
            "Key": "Application",
            "Value": "F5DemoApp"
          },
          {
            "Key": "Costcenter",
            "Value": "F5BD"
          },
          {
            "Key": "Environment",
            "Value": "F5BDENV"
          },
          {
            "Key": "Group",
            "Value": "F5BD"
          },
          {
            "Key": "Owner",
            "Value": "F5BusinesssDevelopment"
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "Bigip Security Group: ",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          }
        ],
        "VpcId": {
          "Ref": "SecurityVpc"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "Bigip1Instance": {
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "commands": {
              "000-disable-1nicautoconfig": {
                "command": "/usr/bin/setdb provision.1nicautoconfig disable"
              },
              "010-install-libs": {
                "command": {
                  "Fn::Join": [
                    " ",
                    [
                      "mkdir -p /var/log/cloud/aws;",
                      "nohup /config/installCloudLibs.sh",
                      "&>> /var/log/cloud/aws/install.log < /dev/null &"
                    ]
                  ]
                }
              },
              "020-generate-password": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "nohup /config/waitThenRun.sh",
                      " f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
                      " --signal PASSWORD_CREATED",
                      " --file f5-rest-node",
                      " --cl-args '/config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/generatePassword --file /config/cloud/aws/.adminPassword --encrypt'",
                      " --log-level silly",
                      " -o /var/log/cloud/aws/generatePassword.log",
                      " &>> /var/log/cloud/aws/install.log < /dev/null",
                      " &"
                    ]
                  ]
                }
              },
              "030-create-admin-user": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "nohup /config/waitThenRun.sh",
                      " f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
                      " --wait-for PASSWORD_CREATED",
                      " --signal ADMIN_CREATED",
                      " --file /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/createUser.sh",
                      " --cl-args '--user admin",
                      " --password-file /config/cloud/aws/.adminPassword",
                      " --password-encrypted",
                      "'",
                      " --log-level silly",
                      " -o /var/log/cloud/aws/createUser.log",
                      " &>> /var/log/cloud/aws/install.log < /dev/null",
                      " &"
                    ]
                  ]
                }
              },
              "040-network-config": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "nohup /config/waitThenRun.sh ",
                      "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js ",
                      "--file /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/aws/1nicSetup.sh ",
                      "--cwd /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/aws ",
                      "--log-level silly ",
                      "-o /var/log/cloud/aws/1nicSetup.log ",
                      "--wait-for ADMIN_CREATED ",
                      "--signal NETWORK_CONFIG_DONE ",
                      "&>> /var/log/cloud/aws/install.log < /dev/null &"
                    ]
                  ]
                }
              },
              "050-onboard-BIG-IP": {
                "command": {
                  "Fn::Join": [
                    " ",
                    [
                      "NAME_SERVER=`/config/cloud/aws/getNameServer.sh mgmt`;",
                      "nohup /config/waitThenRun.sh",
                      "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/onboard.js",
                      "--port 8443",
                      "--ssl-port 8443",
                      "--wait-for NETWORK_CONFIG_DONE",
                      "-o /var/log/cloud/aws/onboard.log",
                      "--log-level silly",
                      "--no-reboot",
                      "--host localhost",
                      "--user admin",
                      "--password-url file:///config/cloud/aws/.adminPassword",
                      "--password-encrypted",
                      "--hostname `curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/hostname`",
                      "--ntp 0.pool.ntp.org",
                      "--tz UTC",
                      "--dns ${NAME_SERVER}",
                      "--module ltm:nominal",
                      "--module asm:nominal",
                      "--ping",
                      "&>> /var/log/cloud/aws/install.log < /dev/null &"
                    ]
                  ]
                }
              },
              "060-custom-config": {
                "command": {
                  "Fn::Join": [
                    " ",
                    [
                      "nohup /config/waitThenRun.sh",
                      "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
                      "--file /config/cloud/aws/custom-config.sh",
                      "--cwd /config/cloud/aws",
                      "-o /var/log/cloud/aws/custom-config.log",
                      "--log-level silly",
                      "--signal CUSTOM_CONFIG_DONE",
                      "--wait-for ONBOARD_DONE",
                      "&>> /var/log/cloud/aws/install.log < /dev/null &"
                    ]
                  ]
                }
              },
              "065-cluster": {
                "command": {
                  "Fn::Join": [
                    " ",
                    []
                  ]
                }
              },
              "070-rm-password": {
                "command": {
                  "Fn::Join": [
                    " ",
                    [
                      "nohup /config/waitThenRun.sh",
                      "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
                      "--file /config/cloud/aws/rm-password.sh",
                      "-o /var/log/cloud/aws/rm-password.log",
                      "--log-level silly",
                      "--wait-for CUSTOM_CONFIG_DONE",
                      "--signal PASSWORD_REMOVED",
                      "&>> /var/log/cloud/aws/install.log < /dev/null &"
                    ]
                  ]
                }
              }
            },
            "files": {
              "/config/cloud/aws/custom-config.sh": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash\n",
                      "POOLMEM='",
                      {
                        "Fn::GetAtt": [
                          "Webserver",
                          "PrivateIp"
                        ]
                      },
                      "'\n",
                      "POOLMEM2='",
                      {
                        "Fn::GetAtt": [
                          "Webserver2",
                          "PrivateIp"
                        ]
                      },
                      "'\n",
                      "POOLMEMPORT=80\n",
                      "APPNAME='demo-app-1'\n",
                      "VIRTUALSERVERPORT=80\n",
                      "PROGNAME=$(basename $0)\n",
                      "function error_exit {\n",
                      "echo \"${PROGNAME}: ${1:-\\\"Unknown Error\\\"}\" 1>&2\n",
                      "exit 1\n",
                      "}\n",
                      "declare -a tmsh=()\n",
                      "echo 'starting custom-config.sh'\n",
                      "tmsh+=(\n",
                      "\"tmsh modify net self-allow defaults add { tcp:6123 tcp:6124 tcp:6125 tcp:6126 tcp:6127 tcp:6128 }\"\n",
                      "\"tmsh create ltm pool ${APPNAME}-pool members add { ${POOLMEM}:${POOLMEMPORT} ${POOLMEM2}:${POOLMEMPORT} } monitor http\"\n",
                      "\"curl -s -f --retry 20 -o /home/admin/asm-policy-linux-high.xml http://cdn.f5.com/product/templates/utils/asm-policy-linux-high.xml\"\n",
                      "\"tmsh load asm policy file /home/admin/asm-policy-linux-high.xml\"\n",
                      "\"tmsh modify asm policy /Common/linux-high active\"\n",
                      "\"tmsh create ltm policy app-ltm-policy strategy first-match legacy\"\n",
                      "\"tmsh modify ltm policy app-ltm-policy controls add { asm }\"\n",
                      "\"tmsh modify ltm policy app-ltm-policy rules add { associate-asm-policy { actions replace-all-with { 0 { asm request enable policy /Common/linux-high } } } }\"\n",
                      "\"tmsh create ltm virtual /Common/${APPNAME}-${VIRTUALSERVERPORT} { destination 0.0.0.0:${VIRTUALSERVERPORT} mask any ip-protocol tcp policies replace-all-with { app-ltm-policy { } } pool /Common/${APPNAME}-pool profiles replace-all-with { http { } tcp { } websecurity { } } security-log-profiles replace-all-with { \"Log illegal requests\" } source 0.0.0.0/0 source-address-translation { type automap } translate-address enabled translate-port enabled}\"\n",
                      "\"tmsh load sys application template /config/cloud/aws/f5.service_discovery.tmpl\"\n",
                      "\"tmsh load sys application template /config/cloud/aws/f5.cloud_logger.v1.0.0.tmpl\"\n",
                      "\"tmsh save /sys config\")\n",
                      "for CMD in \"${tmsh[@]}\"\n",
                      "do\n",
                      "  \"/config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/waitForMcp.sh\"\n",
                      "    if $CMD;then\n",
                      "        echo \"command $CMD successfully executed.\"\n",
                      "    else\n",
                      "        error_exit \"$LINENO: An error has occurred while executing $CMD. Aborting!\"\n",
                      "    fi\n",
                      "done\n",
                      "date\n",
                      "### START CUSTOM CONFIGURTION\n",
                      "### END CUSTOM CONFIGURATION"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000755",
                "owner": "root"
              },
              "/config/cloud/aws/f5.cloud_logger.v1.0.0.tmpl": {
                "group": "root",
                "mode": "000755",
                "owner": "root",
                "source": "https://raw.githubusercontent.com/F5Networks/f5-cloud-iapps/v2.2.0/f5-cloud-logger/f5.cloud_logger.v1.0.0.tmpl"
              },
              "/config/cloud/aws/f5.service_discovery.tmpl": {
                "group": "root",
                "mode": "000755",
                "owner": "root",
                "source": "https://raw.githubusercontent.com/F5Networks/f5-cloud-iapps/v2.2.0/f5-service-discovery/f5.service_discovery.tmpl"
              },
              "/config/cloud/aws/getNameServer.sh": {
                "content": {
                  "Fn::Join": [
                    "\n",
                    [
                      "INTERFACE=$1",
                      "INTERFACE_MAC=`ifconfig ${INTERFACE} | egrep HWaddr | awk '{print tolower($5)}'`",
                      "VPC_CIDR_BLOCK=`curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${INTERFACE_MAC}/vpc-ipv4-cidr-block`",
                      "VPC_NET=${VPC_CIDR_BLOCK%/*}",
                      "NAME_SERVER=`echo ${VPC_NET} | awk -F. '{ printf \"%d.%d.%d.%d\", $1, $2, $3, $4+2 }'`",
                      "echo $NAME_SERVER"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000755",
                "owner": "root"
              },
              "/config/cloud/aws/rm-password.sh": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash\n",
                      "PROGNAME=$(basename $0)\n",
                      "function error_exit {\n",
                      "echo \"${PROGNAME}: ${1:-\"Unknown Error\"}\" 1>&2\n",
                      "exit 1\n",
                      "}\n",
                      "date\n",
                      "echo 'starting rm-password.sh'\n",
                      "declare -a tmsh=()\n",
                      "tmsh+=(\"rm /config/cloud/aws/.adminPassword\")\n",
                      "for CMD in \"${tmsh[@]}\"\n",
                      "do\n",
                      "  if $CMD;then\n",
                      "      echo \"command $CMD successfully executed.\"\n",
                      "  else\n",
                      "      error_exit \"$LINENO: An error has occurred while executing $CMD. Aborting!\"\n",
                      "  fi\n",
                      "done\n",
                      "date\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000755",
                "owner": "root"
              },
              "/config/cloud/f5-cloud-libs-aws.tar.gz": {
                "group": "root",
                "mode": "000755",
                "owner": "root",
                "source": "https://raw.githubusercontent.com/F5Networks/f5-cloud-libs-aws/v2.3.0/dist/f5-cloud-libs-aws.tar.gz"
              },
              "/config/cloud/f5-cloud-libs.tar.gz": {
                "group": "root",
                "mode": "000755",
                "owner": "root",
                "source": "https://raw.githubusercontent.com/F5Networks/f5-cloud-libs/v4.5.0/dist/f5-cloud-libs.tar.gz"
              },
              "/config/installCloudLibs.sh": {
                "content": {
                  "Fn::Join": [
                    "\n",
                    [
                      "#!/bin/bash",
                      "echo about to execute",
                      "checks=0",
                      "while [ $checks -lt 120 ]; do echo checking mcpd",
                      "    tmsh -a show sys mcp-state field-fmt | grep -q running",
                      "    if [ $? == 0 ]; then",
                      "        echo mcpd ready",
                      "        break",
                      "    fi",
                      "    echo mcpd not ready yet",
                      "    let checks=checks+1",
                      "    sleep 10",
                      "done",
                      "echo loading verifyHash script",
                      "if ! tmsh load sys config merge file /config/verifyHash; then",
                      "    echo cannot validate signature of /config/verifyHash",
                      "    exit",
                      "fi",
                      "echo loaded verifyHash",
                      "declare -a filesToVerify=(\"/config/cloud/f5-cloud-libs.tar.gz\" \"/config/cloud/f5-cloud-libs-aws.tar.gz\" \"/config/cloud/aws/f5.service_discovery.tmpl\" \"/config/cloud/aws/f5.cloud_logger.v1.0.0.tmpl\")",
                      "for fileToVerify in \"${filesToVerify[@]}\"",
                      "do",
                      "    echo verifying \"$fileToVerify\"",
                      "    if ! tmsh run cli script verifyHash \"$fileToVerify\"; then",
                      "        echo \"$fileToVerify\" is not valid",
                      "        exit 1",
                      "    fi",
                      "    echo verified \"$fileToVerify\"",
                      "done",
                      "mkdir -p /config/cloud/aws/node_modules/@f5devcentral",
                      "echo expanding f5-cloud-libs.tar.gz",
                      "tar xvfz /config/cloud/f5-cloud-libs.tar.gz -C /config/cloud/aws/node_modules/@f5devcentral",
                      "echo installing dependencies",
                      "tar xvfz /config/cloud/f5-cloud-libs-aws.tar.gz -C /config/cloud/aws/node_modules/@f5devcentral",
                      "echo cloud libs install complete",
                      "touch /config/cloud/cloudLibsReady"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000755",
                "owner": "root"
              },
              "/config/verifyHash": {
                "content": "cli script /Common/verifyHash {\nproc script::run {} {\n        if {[catch {\n            set hashes(f5-cloud-libs.tar.gz) 2481d285c33b97ed083f6e48edcfbd1d5f8fb1dea0578f429017706a1829d3625fab6aff8f55fe71b2b5929410110043a17d57179d833f0f51c90fb0f6ff292d\n            set hashes(f5-cloud-libs-aws.tar.gz) 35361a507a4ef0c8f5205c05d913dbea024f287777e86dccd0c345560a637c106aeab4150af9eafd828929eb7798184e076ea5359e16b4c2d5544cc380800711\n            set hashes(f5-cloud-libs-azure.tar.gz) def8780b308a7cfea52d524e5ad07121e7091ecb826e01c87bc758c90fee5c25d12a2a4a06dc78ff64cb478a471f8514bde2cd5da19fb427de28598272a978bb\n            set hashes(f5-cloud-libs-gce.tar.gz) 9d0d8c32909a272cc9a56dad60121916830462ba26c9bb1d731c10f4e33ba7a856520db55016097db2043e27d048027924470a8e68f366de0339a43b7b68b0d6\n            set hashes(f5-cloud-libs-openstack.tar.gz) 5c83fe6a93a6fceb5a2e8437b5ed8cc9faf4c1621bfc9e6a0779f6c2137b45eab8ae0e7ed745c8cf821b9371245ca29749ca0b7e5663949d77496b8728f4b0f9\n            set hashes(asm-policy-linux.tar.gz) 63b5c2a51ca09c43bd89af3773bbab87c71a6e7f6ad9410b229b4e0a1c483d46f1a9fff39d9944041b02ee9260724027414de592e99f4c2475415323e18a72e0\n            set hashes(f5.http.v1.2.0rc4.tmpl) 47c19a83ebfc7bd1e9e9c35f3424945ef8694aa437eedd17b6a387788d4db1396fefe445199b497064d76967b0d50238154190ca0bd73941298fc257df4dc034\n            set hashes(f5.http.v1.2.0rc6.tmpl) 811b14bffaab5ed0365f0106bb5ce5e4ec22385655ea3ac04de2a39bd9944f51e3714619dae7ca43662c956b5212228858f0592672a2579d4a87769186e2cbfe\n            set hashes(f5.http.v1.2.0rc7.tmpl) 21f413342e9a7a281a0f0e1301e745aa86af21a697d2e6fdc21dd279734936631e92f34bf1c2d2504c201f56ccd75c5c13baa2fe7653213689ec3c9e27dff77d\n            set hashes(f5.aws_advanced_ha.v1.3.0rc1.tmpl) 9e55149c010c1d395abdae3c3d2cb83ec13d31ed39424695e88680cf3ed5a013d626b326711d3d40ef2df46b72d414b4cb8e4f445ea0738dcbd25c4c843ac39d\n            set hashes(f5.aws_advanced_ha.v1.4.0rc1.tmpl) de068455257412a949f1eadccaee8506347e04fd69bfb645001b76f200127668e4a06be2bbb94e10fefc215cfc3665b07945e6d733cbe1a4fa1b88e881590396\n            set hashes(f5.aws_advanced_ha.v1.4.0rc2.tmpl) 6ab0bffc426df7d31913f9a474b1a07860435e366b07d77b32064acfb2952c1f207beaed77013a15e44d80d74f3253e7cf9fbbe12a90ec7128de6facd097d68f\n            set hashes(f5.aws_advanced_ha.v1.4.0rc3.tmpl) 2f2339b4bc3a23c9cfd42aae2a6de39ba0658366f25985de2ea53410a745f0f18eedc491b20f4a8dba8db48970096e2efdca7b8efffa1a83a78e5aadf218b134\n            set hashes(asm-policy.tar.gz) 2d39ec60d006d05d8a1567a1d8aae722419e8b062ad77d6d9a31652971e5e67bc4043d81671ba2a8b12dd229ea46d205144f75374ed4cae58cefa8f9ab6533e6\n            set hashes(deploy_waf.sh) 1a3a3c6274ab08a7dc2cb73aedc8d2b2a23cd9e0eb06a2e1534b3632f250f1d897056f219d5b35d3eed1207026e89989f754840fd92969c515ae4d829214fb74\n            set hashes(f5.policy_creator.tmpl) 06539e08d115efafe55aa507ecb4e443e83bdb1f5825a9514954ef6ca56d240ed00c7b5d67bd8f67b815ee9dd46451984701d058c89dae2434c89715d375a620\n            set hashes(f5.service_discovery.tmpl) 01dc84d4a4be2bc484ab57b771f186f87d4b664e1fb9a073e025b5362ee14d712b970eef4041f794f66286fb1429418aab16e832c89df8a25e02229c68b83de8\n            set hashes(f5.cloud_logger.v1.0.0.tmpl) 64a0ed3b5e32a037ba4e71d460385fe8b5e1aecc27dc0e8514b511863952e419a89f4a2a43326abb543bba9bc34376afa114ceda950d2c3bd08dab735ff5ad20\n\n            set file_path [lindex $tmsh::argv 1]\n            set file_name [file tail $file_path]\n\n            if {![info exists hashes($file_name)]} {\n                tmsh::log err \"No hash found for $file_name\"\n                exit 1\n            }\n\n            set expected_hash $hashes($file_name)\n            set computed_hash [lindex [exec /usr/bin/openssl dgst -r -sha512 $file_path] 0]\n            if { $expected_hash eq $computed_hash } {\n                exit 0\n            }\n            tmsh::log err \"Hash does not match for $file_path\"\n            exit 1\n        }]} {\n            tmsh::log err {Unexpected error in verifyHash}\n            exit 1\n        }\n    }\n    script-signature rDemf/H1eVNT9zqev0rGMqJMAsDqmxZOsgwl7LuxD0bocfXqCnZyIt5B6e1nAFWJRwI2m4uKeknO58YAoNJo/+HvoG+4ifoAT71d5f0o2JX13kbvb4qEJAdl0nkGjy2j62CeHSl40+XimWzCBn8FA3bFOhfP6kfs/gAo7OhokBbk4YTxa1Y16hI5rf5Z9fS78/Km2Fs55XU18KKwL81lWyA/6by46V2LvmGYc461j8yFGLsaJLOsgJ6HZQBKRyH1ZrVAA5mdqOU7i9P1VsRgvgLhE/WBraHIDz5olowiq5AfiqnRG//Z6Wn4QgZONn4IGPMViPq+f2NxrDHlirfy/A==\n    signing-key /Common/f5-irule\n}\n",
                "group": "root",
                "mode": "000755",
                "owner": "root"
              },
              "/config/waitThenRun.sh": {
                "content": {
                  "Fn::Join": [
                    "\n",
                    [
                      "#!/bin/bash",
                      "while true; do echo \"waiting for cloud libs install to complete\"",
                      "    if [ -f /config/cloud/cloudLibsReady ]; then",
                      "        break",
                      "    else",
                      "        sleep 10",
                      "    fi",
                      "done",
                      "\"$@\""
                    ]
                  ]
                },
                "group": "root",
                "mode": "000755",
                "owner": "root"
              }
            }
          }
        }
      },
      "Properties": {
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "DeleteOnTermination": "true",
              "VolumeType": "gp2"
            }
          },
          {
            "DeviceName": "/dev/xvdb",
            "NoDevice": {}
          }
        ],
        "IamInstanceProfile": {
          "Ref": "bigipServiceDiscoveryProfile"
        },
        "ImageId": "ami-017ea320ccba8a35e",
        "InstanceType": "t2.large",
        "KeyName": {
          "Ref": "sshKey"
        },
        "NetworkInterfaces": [
          {
            "Description": "Public or External Interface",
            "DeviceIndex": "0",
            "NetworkInterfaceId": {
              "Ref": "Bigip1Interface"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Application",
            "Value": "F5DemoApp"
          },
          {
            "Key": "Costcenter",
            "Value": "F5BD"
          },
          {
            "Key": "Environment",
            "Value": "F5BDENV"
          },
          {
            "Key": "Group",
            "Value": "F5BD"
          },
          {
            "Key": "Owner",
            "Value": "F5BusinesssDevelopment"
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "Big-IP: ",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "/opt/aws/apitools/cfn-init-1.4-0.amzn1/bin/cfn-init -v -s ",
                {
                  "Ref": "AWS::StackId"
                },
                " -r ",
                "Bigip1Instance",
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      },
      "Type": "AWS::EC2::Instance"
    },
    "Bigip1Interface": {
      "Properties": {
        "Description": "Public External Interface for the BIG-IP",
        "GroupSet": [
          {
            "Ref": "BigipExternalSecurityGroup"
          }
        ],
        "SecondaryPrivateIpAddressCount": "1",
        "SubnetId": {
          "Ref": "SecuritySubnet"
        }
      },
      "Type": "AWS::EC2::NetworkInterface"
    },
    "Bigip1SelfEipAddress": {
      "DependsOn": "AttachGateway",
      "Properties": {
        "Domain": "vpc"
      },
      "Type": "AWS::EC2::EIP"
    },
    "Bigip1SelfEipAssociation": {
      "DependsOn": "AttachGateway",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "Bigip1SelfEipAddress",
            "AllocationId"
          ]
        },
        "NetworkInterfaceId": {
          "Ref": "Bigip1Interface"
        },
        "PrivateIpAddress": {
          "Fn::GetAtt": [
            "Bigip1Interface",
            "PrimaryPrivateIpAddress"
          ]
        }
      },
      "Type": "AWS::EC2::EIPAssociation"
    },
    "bigipSecurityGroupIngressAsmPolicySync": {
      "Properties": {
        "FromPort": "6123",
        "GroupId": {
          "Ref": "BigipExternalSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "BigipExternalSecurityGroup"
        },
        "ToPort": "6128"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "bigipServiceDiscoveryAccessRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "ec2:DescribeInstances",
                    "ec2:DescribeInstanceStatus",
                    "ec2:DescribeAddresses",
                    "ec2:AssociateAddress",
                    "ec2:DisassociateAddress",
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:DescribeNetworkInterfaceAttribute",
                    "ec2:DescribeRouteTables",
                    "ec2:ReplaceRoute",
                    "ec2:assignprivateipaddresses",
                    "sts:AssumeRole"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*"
                  ]
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "BigipServiceDiscoveryPolicy"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "bigipServiceDiscoveryProfile": {
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "bigipServiceDiscoveryAccessRole"
          }
        ]
      },
      "Type": "AWS::IAM::InstanceProfile"
    }
  }
}
